{"Extras/Examples":{"title":"Examples","links":["Getting-started/Better-rule-tile-container","Getting-started/Tiling-rule","The-editor/Export-options","Features/Preset-block","The-editor/Tile-inspector","The-editor/Sprite-override-settings","Features/Custom-properties"],"tags":[],"content":"Examples §\nThe package comes with a few examples to help you better understand the tool. All of the examples contain a Better rule tile container asset, a tilemap, a scene, and a little description to explain that example.\n#1 - Simplify rules §\nThis first example shows you how to create Tiling rules using the Simplify similar rules option from the Export options.\n\n\n\n                  \n                  Example #1 \n                  \n                \nThe simplify rules option simplifies the output rules to fit every possible situation, given that you’ve provided enough samples.\nWith enough samples provided this is the easiest way of creating rule tiles using this tool, just draw out the shapes with the tiles, mark the empty spaces around the tiles with the “not same” rule, and fill in the sprites.\n\n#2 - Advanced §\nThis second example shows you how you can make more generic Tiling rules, by laying out them in a way where the tiles doesn’t check for the neighbors which wouldn’t affect them.\n\n\n\n                  \n                  Tip \n                  \n                \nIf you want more precise control over how the rules are generated, you can create the rules in a similar way that you would’ve created by default. You just simply need to mark the the neighbors where it would connect with the same tile, and mark neighbor’s that will not connect with the “not same” tile.\nThis method is perfect for more advanced users, as it offers quicker rule creation and more control over how the tiles connect. This method can also be used alongside the “simplify rules” option, to enable even more possibilities.\n\n#3 - Preset blocks §\nThis example shows a potential use for the Preset block feature.\n\n\n\n                  \n                  Tip \n                  \n                \nSometimes checking only for the neighboring tile is not enough. With preset blocks you can create complete presets that’ll appear the same on the tilemap once the tile placements match the block.\nTo create a preset block just simply select an area and click the “create preset block” button in the toolbar.\n\n#4 - Connection §\nThis example shows you how you can create interactions between different tiles, by drawing the Tiling rules in a way that they check for other tiles. This example also show how to make tiles always connect to each other using the Connection feature from the Tile inspector.\n\n\n\n                  \n                  Tip \n                  \n                \nIf you have two separat tiles and you want them to connect to each other, just simply select the tiles in the tile drawer, and un the “tile info panel” under the “connect to” option you can select tiles that the tile you’re editing will connect to. Any tile specified in this option will be treated as it were the same tile, and will connect to it.\nYou can also create interactions with other tiles by drawing them on the grid. That way you can create specific transitions between different tiles.\n\n#5 - Universal sprite settings §\nThis next example shows how to use the Sprite override settings window which you can enable from the Export options window.\n\n\n\n                  \n                  Tip \n                  \n                \nYou can change the tile output’s properties like the output sprite or the collider type by selecting the “tile inspector” tool for the top left of the toolbar and selecting a tile. But if you have multiple tiles with the same output sprite this method would not work well as you’d need to change it for all the tiles. Here the best option is to use the “universal sprite settings”.\nThis option will allow you to change the tile output universally across all the tiles which have the same output sprite. To enable it click on the “export options” button in the top right corner (this option is enabled by default on newly created assets) and than you can open the sprite settings window with a button in the toolbar.\nYou can use the sprite settings window the same way you’d use the sprite drawer, you can drag the sprites into it and then select the sprites to draw with them. But additionally you can also change the output settings of all the tiles which use that sprite.\nEnter play mode to test the animation!\n\n#6 - Variations §\nThis example shows you how you can use one tile as a fallback for another one. You can do this in the Tile inspector window.\n\n\n\n                  \n                  Tip \n                  \n                \nIf you have different tiles which have a few rules which are the same between them, you can use the tile variation feature, so you don’t have to specify every rule.\nIf a tile is variation of another, any rules that’s missing from this tile but it is in the other one will get filled in automatically. In this example the stone tile is a variation of the dirt tile, so any rule that’s missing from the stone tile will be taken from the dirt tile.\nTo set a tile variation select the tile in the tile drawer, and under the “tile variation” tab uncheck the “unique tile” option and select the variation tile.\n\n#7 - Custom properties §\nThis last example shows you how you can use the Custom properties feature in your games. It includes the usual tile container, tilemap and scene, but it also includes an example script that you can try out to see the feature in-game.\n\n\n\n                  \n                  Tip \n                  \n                \nIf you want to store information in the tiles you can add properties to them in the tile inspector under the properties tab. You can create a script that reads these values from the tilemap, check the sample scripts provided for further info.\n"},"Extras/Keyboard-shortcuts":{"title":"Shortcuts","links":["The-editor/Grid","Tools/Brush","Tools/Eraser","The-editor/Tile-inspector","Tools/Picker-tool","Tools/Lock-selection","Tools/Move-tool","Features/Preset-block","Tools/Selection-tool"],"tags":[],"content":"Grid controls §\n\nLeft Mouse Click - Use the selected tool on the Grid\nRight Mouse Click &amp; Drag - Move the Grid around\nMiddle Mouse Click &amp; Drag - Move the Grid around\nMouse Scroll - Zoom in the Grid\n\nKeyboard shortcuts §\n\n\nB - Select the Brush tool\n\n\nD - Select the Eraser tool\n\n\nE - Select the Tile inspector tool\n\n\nI - Select the Picker tool\n\n\nL - Lock selection\n\n\nM - Select the Move tool\n\n\nP - Create Preset block\n\n\nU - Unlock selection\n\n\nS - Select the Selection tool\n\n\nDelete - Delete the selected area\n\n\nCTRL + C - Copy selection\n\n\nCTRL + V - Paste selection\n\n\nCTRL + Z - Undo\n\n\nCTRL + Y - Redo\n\n"},"Features/Custom-properties":{"title":"Custom Properties","links":["Getting-started/Tile","The-editor/Tile-inspector","Scripting/BetterRuleTile.cs"],"tags":[],"content":"Custom properties §\nCustom properties are a way to store information in your Tiles, that you can later access at runtime using a script.\nTo add properties to your tiles, select a tile, and in the Tile inspector, scroll down to the Custom properties category. Here you can store different types of data in your tile. These datatypes are the following:\n\nInt\nFloat\nDouble\nChar\nString\nBool\n\n\nYou can set a name for the property and a value. You’ll use this property name to access the value of that property.\nScripting §\nTo read the properties of the tile, you’ll need a reference to the tilemap that the tiles are placed on. If you have this reference to the tilemap, you can use the tilemap.WorldToCell(Vector2 worldPosition) method to get the tile coordinate at your desired world position.\nAfter you got the tile coordinate, you can use the tilemap.GetTile(Vector3Int position) function to get the tile at that position. This function returns a TileBase class, so we first have to check if it’s a BetterRuleTile, than cast it to such.\nAfter we’ve converted the TileBase into a BetterRuleTile object, we can use the various Get functions to get the type of property we want. Each type of property has it’s own Get function, so use the one you need. You can find all methods on the BetterRuleTile.cs documentation page.\n//This script finds the tile of the specified tilemap where your mouse cursor is\n//If the tile under your mouse cursor is a better rule tile, it will read it&#039;s custom properties\n \nusing System;\nusing UnityEngine;\nusing UnityEngine.Tilemaps;\nusing VinTools.BetterRuleTiles;\n \nnamespace VinTools.BetterRuleTiles.Sample\n{\n    public class CustomPropertyTest : MonoBehaviour\n    {\n        public Tilemap tilemap;\n        public Camera cam;\n \n        public event Action&lt;string&gt; onReadValue;\n \n        private void Update()\n        {\n            //get the cell position of the mouse (this could also be the position of the player for example)\n            //you have to cast the worldpoint to a vector2 so it doesn&#039;t use the camera&#039;s z position\n            Vector3Int cellPos = tilemap.WorldToCell((Vector2)cam.ScreenToWorldPoint(Input.mousePosition));\n \n            //get the tile on that cell position as a better rule tile\n            TileBase tile = tilemap.GetTile(cellPos);\n \n            //check if the tile is not null. The tile can be null if there was no tile placed there\n            //check if the tile is a better rule tile\n            if (tile != null &amp;&amp; tile is BetterRuleTile)\n            {\n                //convert it to a better rule tile\n                BetterRuleTile betterTile = tile as BetterRuleTile;\n \n                //get the values\n                bool walkable = betterTile.GetBool(&quot;Walkable&quot;);\n                float walkspeed = betterTile.GetFloat(&quot;WalkingSpeed&quot;);\n \n                onReadValue?.Invoke($&quot;Tile: {tile.name}\\nWalkable: {walkable}\\nWalking speed: {walkspeed}&quot;);\n            }\n            //if the tile is not a better tule tile\n            else if (tile != null) onReadValue?.Invoke($&quot;Tile: {tile.name}&quot;);\n            //if there is no tile\n            else onReadValue?.Invoke(&quot;Tile: Empty&quot;);\n        }\n    }\n}"},"Features/Preset-block":{"title":"Preset Blocks","links":["Extras/Examples","Tools/Selection-tool","The-editor/Toolbar","Extras/Keyboard-shortcuts","Tools/Grid-cell-inspector"],"tags":[],"content":"Preset blocks §\nPreset blocks provide a way to easily create multi-tile structures. When placing tiles to the tilemap in the same layout as a preset block, the preset block will be used as the output of the tile, instead of the other rules. You can look at the Examples provided with the package to see them in action.\n\nTo create a preset block, just simply select the area with the Selection tool and press the create preset block button in the Toolbar or by using Keyboard shortcuts (P). Preset blocks will be displayed with an orange outline.\n\nPreset blocks cannot overlap, if you try to add a preset block over an already existing one, it’ll ask you whether you want to add this selection to the current preset block or not add it. If the selection is overlapping two already existing preset blocks, you wont be able to add a new one.\nPreset block settings §\nTo change settings of the preset block or remove that, you have to use the Grid cell inspector tool. When selecting a cell inside a preset block the inspector window will show the preset block options instead of the Neighbor options. Here you can change:\n\nIf the preset block can be rotated or mirrored\nDelete the preset block\n"},"Getting-started/Better-rule-tile-container":{"title":"Container Asset","links":["Getting-started/Better-rule-tile-container","Getting-started/Editor-window"],"tags":[],"content":"Better rule tile container §\nTo start using the tool first you need to create a Better rule tile container asset. This asset is the core of the tool. Everything you do will be saved into this container asset, therefore you must create one before you start doing anything else.\nTo create an asset, right click in the project window, and navigate to: Create -&gt; 2D -&gt; Tiles -&gt; Better Rule Tile Container, and click on it.\n\nAfter you’ve created the asset you can either double-click to open it, or you can also select the asset and press the Open in editor window button to open it.\n\nAsset behavior §\nOpening and closing container assets behave as the following:\n\nIf you have multiple container assets each of them will open it’s own Editor window.\nWhen trying to open a container that already has an editor open, it’ll bring that Editor window into focus.\nDeleting a container asset while editing it will also close the Editor window.\n\n\n\n                  \n                  Editing the container directly \n                  \n                \nYou shouldn’t edit this asset directly, but only through the editor to avoid errors. Only edit the asset directly for debugging purposes!\n"},"Getting-started/Editor-window":{"title":"The Editor","links":["Getting-started/Better-rule-tile-container","The-editor/Grid","The-editor/Toolbar","The-editor/Tile-drawer","The-editor/Tile-inspector","The-editor/Sprite-drawer","The-editor/Editor-settings","The-editor/Export-options","Getting-started/Export"],"tags":[],"content":"Editor window §\nThe better rule tiles editor window is the place where the magic happens. You access it by creating a Better rule tile container asset and opening it. When you open an editor window the first things you’ll see are the:\n\nThe Grid\nThe Toolbar\nAnd the Tile drawer\n\n\nUse the Tile drawer to start creating tiles, and than use the tools in the Toolbar to draw on the Grid.\nYou can also open the Tile inspector by selecting a tile that you’ve created in the Tile drawer. Or you can enable the Sprite drawer, where you can pick sprites to draw with the tools.\nYou can change settings about the editor in the Editor settings dropdown and when you finished you can use the Export options dropdown to Export your tiles."},"Getting-started/Export":{"title":"Export Tiles","links":["Getting-started/Tile","Getting-started/Tiling-rule","The-editor/Export-options","Getting-started/Better-rule-tile-container","Getting-started/Editor-window","The-editor/Tile-drawer"],"tags":[],"content":"Exporting Tiles §\nAfter you’ve created your Tiles and set up your Tiling rules, you can head to the Export options to export your tiles into tile assets you can use in the game.\n\nYou can export your tiles by clicking the Generate tiles button in Export options. This will start the export process, which will take some time depending on how complex are your tiles. Usually only takes a few seconds.\n\nAfter it’s done, the exported tiles will be added to the Better rule tile container. After this it’s the same process as with any other tile. Add them to a tile palette to draw with them inside the scene view.\n\n\n                  \n                  Warning \n                  \n                \nThe exported tiles are all managed by the editor, so you cannot edit, rename or delete them in the exported form. In order to do so you have to do it in the Editor window, than export them again to see your changes take effect.\n\n\n\n                  \n                  Info \n                  \n                \nExporting the tiles again will update the already existing tiles, so any changes you do in the editor will show in the tiles already placed (you might need to restart the scene or reload the tilemap).\n\n\n\n                  \n                  Warning \n                  \n                \nDeleting a tile from the Tile drawer that you’ve already placed in your scene and exporting it will result in the old exported tile getting deleted as well, which cannot be recovered!\n"},"Getting-started/Sprite":{"title":"Sprites","links":["Getting-started/Tile","Getting-started/Tiling-rule","The-editor/Sprite-drawer","The-editor/Sprite-override-settings","Tools/Picker-tool","Tools/Brush"],"tags":[],"content":"Sprites §\nSprites are an essential part of the tool. Every sprite placed on the grid on top of a Tile will create a Tiling rule in the exported tile.\nAdding sprites to the editor §\nTo add sprites, you just simply drag and drop them from the project window to the editor. You can select one or multiple sprites, but the sprites have to be part of the same image file (sliced image). If they’re in a separate file, you have to add them separately too.\n\nWhen you drag and drop sprites, they’ll get added in a square pattern, but if you drop in the sliced image, the sprites will keep their layout from the image.\nAlternatively you can also drag the sprites directly to the Sprite drawer or the Sprite override settings. This way the sprites won’t be added to the grid but directly to the drawer.\nUsing sprites §\nTo use the sprites you can use the Picker tool to pick a sprite from the grid. After that the tool will automatically switch to the Brush tool so you can start drawing sprites immediately. You can also select sprites from either the Sprite drawer or the Sprite override settings."},"Getting-started/Tile":{"title":"Tiles","links":["The-editor/Tile-drawer","Tools/Brush","The-editor/Tile-inspector","Getting-started/Tiling-rule"],"tags":[],"content":"Tiles §\nTiles are an essential part of the tool. They represent the actual tiles which will be generated and the ones that you’ll be able to place into your game.\n\nTo create a tile inside the editor, go to the Tile drawer and click the Add Tile button. You can add as many tile as you want, there’s no limit on how much you can create.\nAfter creating a tile you can select it to draw with it using the Brush tool. When selecting it the Tile inspector window will also appear, where you can change every option the tile has. To read more about the options go the the Tile inspector page.\nUsing tiles §\nTo start using the tiles you can select them from the Tile drawer, which will also select the Brush tool, so you can start creating Tiling rules."},"Getting-started/Tiling-rule":{"title":"Tiling Rules","links":["Getting-started/Tiling-rule","The-editor/Grid","Getting-started/Tile","Getting-started/Sprite","Tools/Brush","The-editor/Toolbar","The-editor/Export-options","Extras/Examples","Tools/Grid-cell-inspector","Features/Preset-block","The-editor/Tile-inspector"],"tags":[],"content":"Tiling rules §\nTiling rules are what makes it possible for the rule tiles to work. When placing the tile on the tilemap, it’ll check all adjacent tiles, and look for a tiling rule that matches with the surroundings. In regular rule tiles you set up tiling rules by individually clicking and cycling through the available options on the small grid until you have your desired tiling rule. This can be very tedious, especially if you have a lot of rules, so Better Rule Tiles tries to overhaul this, by replacing the the small grid from the inspector with a large open Grid, where you can freely place Tiles and Sprites to create Tiling rules.\nCreating a tiling rule §\n\nThe concept of default tiles is the following:\n\nPlace Not this rule to the side where you have an edge,\nAnd place a This rule where your tile continues.\nLeave the place empty if the tile doesn’t effect the output.\n\nThe concept of tiling rules in Better Rule Tiles is the same, with the only difference on how you place them down, for which you’ll need the Brush tool.\n\nPlace a Sprite on a Tile to add that sprite to the Tiling rules of the tile you place it on.\nPlace the same tile next to it to mark that neighbor as continuous.\nPlace the rule Not same to mark that neighbor as an edge.\n\nThere are also a few custom rules for more specific scenarios:\n\nEmpty - it’ll only match if there’s no tile at that position\nAny tile - it’ll match if there’s any tile on that position\n\nGrouping tiling rules §\nThe upside of having all tiles on one single large Grid instead of multiple individual grids is that you can place Tiling rules directly next to each other. This means that you can draw out entire shapes using the sprites, than you can just draw tiles where sprites are.\n\n\n                  \n                  Tip \n                  \n                \nUse the Brush tool to place sprites and tiles. You can see what is under a sprite using the hide sprites button on the Toolbar.\n\n\nBut it’s not always the best to pack tiling rules tightly next to each other, as that’ll require the need to set up every specific scenario that could happen. So it’s a good idea to separate tiling rules in a way that’ll make them more generic, leaving the position empty if that neighbor does not effect that specific output. This way you’ll need to set up less rules.\n\nIf drawing out more complete shapes is easier for you to create tiling rules, than there’s an option to simplify all those case specific rules into more generic rules.\nIf you enable the Simplify similar rules option in the Export options, the tool will take care of creating those more generic tiling rules for you. The only downside of this option is that you’ll need enough Tiling rules for the tool to simplify.\n\n\n\n                  \n                  Info \n                  \n                \nFor a better example, you can look at the Examples provided with the package.\n\nExtended tiling rules §\nBy default, the rule tile checks in a 3x3 area around it to look for matching tiles, but what if you have more complicated tiles that require a larger area?\nYou can change this using the Grid cell inspector tool under the Neighbor positions. This small grid is similar how you’d set the rules in a regular rule tile, but here it only determines where the tiling rule will check for it’s neighbors. The actual rules are determined by the tiles you place on the Grid.\n\nPreset blocks use this feature to create larger structures. It just basically looks for all the neighbors that are part of the preset block, and if they’re in the right configuration, the rules will match.\nInteractions between tiles §\nRegular rule tiles don’t have the ability to connect to each other, unless you create a custom scripted rule tile. But Better Rule Tiles has this feature by default.\nTo define a connection between two different tiles, just simply place it when the connection will happen. Just like when defining a hard edge using the not same rule, you can define a transition between two tiles by using the Tile you’re transitioning to.\n\nIf you want your tile to always connect to another one like it was the same tile, you can set that up in the Tile inspector window under the Connect to category. The tile will connect to any tile you add there just like it’d connect to itself.\n\n\n                  \n                  Tip \n                  \n                \nYou can check the Examples to see these features in action.\n"},"Home/About-the-tool":{"title":"About","links":["Getting-started/Better-rule-tile-container","Home/Frequently-Asked-Questions"],"tags":[],"content":"About the tool §\nBetter Rule Tiles for Unity was made to make the hassle of creating rule tiles better, easier and more intuitive that Unity’s built in solution, while also added more features which would require you to code them yourself.\nIt’s main features include:\n\nDraw in all the tile placement possibilities into a single grid, no need to set rules by hand\nEdit multiple tiles on one grid, and save them into a single asset for better file organization.\nIncludes more rules than the default rule tile, which enables different tiles to interact with each other on the tilemap.\nAutomatically orders the rules for you, so one rule will not override the rest accidentally.\nAdding extended neighbors to a tile takes significantly less time.\nEasily create sloped and other variations of a tile.\nCreate patterns\nCreate preset blocks for more complicated shapes\nQuickly create new tiles if you’ve already set one up prior.\nSupports square, isometric and hexagonal grids as well.\n\nTry out the demo or buy the package on itch.io. You can also buy the package from the Unity asset store.\nUsing the tool §\nTo get started with the tool create a Better rule tile container asset.\nUseful information §\n\nYou can also check the Frequently Asked Questions if you got stuck somewhere.\nJoin my discord server if you have any questions.\nYou can also find tutorials about the package, and other useful and interesting content on my youtube channel.\nYou can report issues on the Better Rule Tiles support GitHub page.\nIf you have an idea you feel like should be added to the tool, you can post it on the Discord or the support page.\n"},"Home/Frequently-Asked-Questions":{"title":"FAQ","links":[],"tags":[],"content":"Frequently Asked Questions §\nMy sprites get displayed as missing textures. §\nSelect your image file, and in the inspector under advanced settings enable Read/Write, after that close the editor and reopen it again to see the changes get applied.\nMy sprites are stretched on the grid. §\nSelect your image file, and in the inspector change the mesh type from tight to full rect, this will make sure blank spaces are not left out from the image. After that close the editor and reopen it again to see the changes get applied.\nMy tiles are blank when I place them into the tile palette. §\nYou have to set the default sprite option in the tile. If no rules match (which are pretty likely in the tile palette) than the default sprite is shown, if that’s empty it shows nothing."},"Scripting/BetterRuleTile.cs":{"title":"BetterRuleTile.cs","links":[],"tags":[],"content":"BetterRuleTile.cs §\nNamespace §\nusing VinTools.BetterRuleTiles; \nMethods §\npublic int GetInt(string key, int defaultValue = default);\npublic float GetFloat(string key, float defaultValue = default);\npublic double GetDouble(string key, double defaultValue = default);\npublic char GetChar(string key, char defaultValue = default);\npublic string GetString(string key, string defaultValue = default);\npublic bool GetBool(string key, bool defaultValue = default);\nExample script §\n//This script finds the tile of the specified tilemap where your mouse cursor is\n//If the tile under your mouse cursor is a better rule tile, it will read it&#039;s custom properties\n \nusing UnityEngine;\nusing UnityEngine.Tilemaps;\nusing VinTools.BetterRuleTiles;\n \npublic class CustomPropertyTest : MonoBehaviour\n{\n    public Tilemap tilemap;\n    public Camera cam;\n \n    private void Awake()\n    {\n        //if the script is placed on the tilemap itself, this will assign it automatically\n        if (tilemap == null &amp;&amp; gameObject.TryGetComponent(out Tilemap map)) tilemap = map;\n        //set the camera if it wasn&#039;t set by the user\n        if (cam == null) cam = Camera.main;\n    }\n \n    private void Update()\n    {\n        //check if tilemap and camera were assigned\n        if (tilemap == null)\n        {\n            Debug.LogError(&quot;Tilemap was not assigned!&quot;, this);\n            return;\n        }\n        if (cam == null)\n        {\n            Debug.LogError(&quot;Camera was not assigned!&quot;, this);\n            return;\n        }\n \n        //get the cell position of the mouse (this could also be the position of the player for example)\n        //you have to cast the worldpoint to a vector2 so it doesn&#039;t use the camera&#039;s z position\n        Vector3Int cellPos = tilemap.WorldToCell((Vector2)cam.ScreenToWorldPoint(Input.mousePosition));\n \n        Debug.Log(cellPos);\n        //get the tile on that cell position as a better rule tile\n        TileBase tile = tilemap.GetTile(cellPos);\n \n        //check if the tile is not null. The tile can be null if there was no tile placed there\n        //check if the tile is a better rule tile\n        if (tile != null &amp;&amp; tile is BetterRuleTile)\n        {\n            //convert it to a better rule tile\n            BetterRuleTile betterTile = tile as BetterRuleTile;\n \n            //get the values\n            bool walkable = betterTile.GetBool(&quot;Walkable&quot;);\n            float walkspeed = betterTile.GetFloat(&quot;WalkingSpeed&quot;);\n \n            Debug.Log($&quot;Tile: {tile.name}, Walkable: {walkable}, Walking speed: {walkspeed}&quot;);\n        }\n        //if the tile is not a better tule tile\n        else if (tile != null) Debug.Log($&quot;Tile: {tile.name}&quot;);\n        //if there is no tile\n        else Debug.Log(&quot;Tile: Empty&quot;);\n    }\n}"},"The-editor/Editor-settings":{"title":"Editor Settings","links":["Getting-started/Editor-window","The-editor/Tile-drawer","The-editor/Sprite-drawer","The-editor/Grid","Tools/Lock-selection"],"tags":[],"content":"Editor settings §\nThe editor settings is the place where you can change the appearance and behavior of the Editor window and other windows inside the editor. These settings are separated into groups for better readability.\nTile drawer §\nThis group of settings changes the appearance of the Tile drawer window:\n\nTile drawer size - this option changes the width of the tile drawer, the number specified is the amount of tiles visible at once in the drawer.\n\n\nSprite drawer §\nThese options change the appearance of the Sprite drawer window:\n\nSprite drawer height - Changes the size of the buttons in the sprite drawer, the number specified is the width and height of a button in the sprite drawer.\nSprite drawer columns - Specifies how many columns of sprites should be displayed in the sprite drawer, increasing this value will increase the width of the drawer.\nExpanded drawer columns - How many columns should be displayed when the sprite drawer is expanded.\nSave sprite drawer - If this option is enabled, the drawer will remember the sprites you added to it when you reopen the editor. If the option is disabled, when reopening it’ll only show sprites that you’ve already placed on the grid. If you have a lot of sprites enabling this option could cause the editor to load slower.\nClear sprite drawer - Clears every sprite from the drawer that is not used on the grid.\nAdd all sprites - Clicking this will search for every sprite in the asset database and add all of them to the sprite drawer. This could slow down your editor if you have too many sprites in your project.\n\n\nGrid §\nThese options can change the look of the Grid:\n\nCurrent zoom - This value represents how much you’re zoomed in to the grid, here you can set a zoom amount by hand, and even go outside the zoom limit.\nRender small grid - This option set whether the grid should keep rendering when zoomed out by a large amount, or just keep rendering. Setting this option to disabled will help better seeing the tiles when zoomed out, and will also help with performance so the grid doesn’t need to render a bunch of lines.\nZoom threshold - If the render small grid is disabled, the grid will stop rendering when the current zoom amount goes below this value.\nGrid size - Specifies the size of a grid cell at 1x zoom. With this option you can also change the shape of the tile.\nGrid cell offset - If your tiles do not show perfectly on the grid, but between two grid cells, you can change the offset with this option.\n\n\nLocked cells §\nThese options change the behavior of the Lock selection feature:\n\nShow locked overlay - Adds a striped overlay on top of locked cells.\nShow locked outline - Displays an outline around individual locked cells.\nOutline color - The color of the outline of locked cells.\n\n"},"The-editor/Export-options":{"title":"Export Options","links":["The-editor/Grid","Getting-started/Tiling-rule","Extras/Examples","Tools/Grid-cell-inspector","The-editor/Sprite-override-settings"],"tags":[],"content":"Export options §\nThe export options contains every setting that’ll affect the output of the exported tiles, and is also the place when you can export them.\n\nGrid type - This is the place where you can change the type of the Grid. You can choose between square (which is the default one), isometric, and two types of hexagonal grids. This setting can be changed even if you already have tiles on the grid, but it’ll relocate the grid cells, so it’s better to change this setting before you do anything in the editor. This setting also affects some default values when creating a new tile, as different tilemaps require different shaped tiles.\nSimplify rules - This option affects how the rules will be generated. If this option is enabled, every Tiling rule that has the same output sprite will be combined into a single tiling rule. It’ll compare every of those tiling rules, and create one tiling rule that’s true for all of those scenarios. This will prevent unnecessary duplicate tiling rules. For this option to work as you’d like, you need to give it as much samples as possible, so it can filter through every scenario and choose the one that applies to all. You can look at he Examples provided with the package to see this option in action.\n\nUniversal sprite settings - If this option is disabled, you can use the Grid cell inspector tool to inspect a grid cell, and change it’s properties like output sprite, collider, animation and settings like this. But this means that if you have multiple tiling rules with the same sprite, those settings will not match. If universal sprite settings is enabled, these options from the Grid cell inspector will move to the Sprite override settings. In this window you can change the sprite output settings per sprite and not per tiling rule. If you change a sprites’ settings in this override settings window, every tiling rule that has the same sprite output will use the same sprite settings. You can open the Sprite override settings from the toolbar.\nGenerate tiles - Pressing this button will start the export process. After the process is done, the tiles will be saved to the container asset and the asset will be highlighted in the project window. The generated tiles will be saved into the container in order to keep them synced, and if you modify them and export them again, it will update the already existing tiles instead of creating new ones."},"The-editor/Grid":{"title":"Grid","links":["Getting-started/Tile","Getting-started/Sprite","Getting-started/Tiling-rule","The-editor/Export-options","The-editor/Toolbar","The-editor/Editor-settings"],"tags":[],"content":"Grid §\nThe grid is the heart of the tool. This is where you place Tiles and Sprites to create Tiling rules.\n\nThere are 3 different types of grids you can work in: Square, Isometric and Hexagonal, with the hexagonal grid having two variations: pointed topped and flat topped. You can change the grid type in the Export options window, which can be found in the most right side of the Toolbar. You can further customize how the grid appears in the Editor settings window. which can be found right next to the Export options button.\n\n\n                  \n                  Info \n                  \n                \nIt’s best to change the grid type before you start working on anything, to avoid displacement of the grid due to the different coordinate systems.\n"},"The-editor/Sprite-drawer":{"title":"Sprite Drawer","links":["Getting-started/Sprite","The-editor/Editor-settings","The-editor/Tile-drawer","Tools/Brush"],"tags":[],"content":"Sprite drawer §\nThe sprite drawer is a window inside the editor where you can pick sprites to draw with.\nAdding sprites to the drawer §\nYou can add sprites to the sprite drawer in different ways. You can directly drag and drop sprites into the drawer. When adding sprites directly to the drawer you can select as many sprites or texture files as you want, all of them will be added to the drawer. The second way is to drop them directly to the grid. Every sprite that’s on the grid will be automatically added to the drawer. When dropping sprites to the grid directly, you can select multiple sprites, but only one texture file. More on this behavior in the Sprite page.\nBased on the Save sprite drawer setting in the Editor settings window, the sprites which are not used on the grid will not be remembered when opening the editor, but if this option is set to true, all of the sprites will stay in the drawer.\nUsing the sprite drawer §\nUsing the drawer is self explanatory, you just click a sprite in the drawer to select it. The selected sprite will be displayed on the left side of the Tile drawer window. When picking a sprite the Brush tool will be selected automatically so you can start drawing immediately after picking a sprite.\nYou can also expand the window to show more sprites at once by clicking the small arrow in the top right corner of the window. With this button you can also collapse the window to its original size.\nSprite drawer settings §\nIn the Editor settings window you can change a few settings on how the drawers should appear and behave. More info on this on the Editor settings page."},"The-editor/Sprite-override-settings":{"title":"Sprite Overrides","links":["The-editor/Sprite-override-settings","Getting-started/Sprite","Getting-started/Tiling-rule","The-editor/Toolbar","Tools/Grid-cell-inspector","The-editor/Export-options","Tools/Brush","The-editor/Sprite-drawer"],"tags":[],"content":"Sprite override settings §\nThe Sprite override settings window is where you can modify the output of a Sprite, where you can assign gameobjects, set collider types, animations and more. If a Tiling rule has an output with a sprite added to the overrides, the sprite output of that tile will be determined by the settings set here.\nTo open the window look for the “Sprite override settings window” button in the Toolbar (Image with a gear icon). Clicking this will show the window. If the sprite drawer is visible opening this window will hide the sprite drawer and show this instead. You can also open the window by inspecting a sprite with the Grid cell inspector tool and clicking the Open sprite override settings button. If the sprite is not in the overrides yet this button will say Open sprite override settings\n\nIf you can’t see these option in the toolbar you probably don’t have the Universal sprite settings option enabled in the Export options. After you’ve enabled this option the button will appear on the Toolbar.\nAdding sprites to overrides §\nTo add sprites to the overrides you can either use the Grid cell inspector tool or just simply drag and drop them in the overrides window.\nIf the Universal sprite settings option is enabled in the Export options, inspecting a sprite with the Grid cell inspector tool will show an option to add the sprite to the overrides instead of showing the sprite options. If the sprite is already in the overrides the button will simply open the window, or select the sprite within the window if it’s already opened.\n\nYou can also add sprites to the overrides by dragging and dropping them directly to this window. You can only add a single or multiple sprites, but not textures.\n\nUsing the window §\nTo change the settings of a sprite, just simply click on them, which will reveal the settings for that sprite. Clicking a sprite will also select the Brush tool automatically and set the selected Sprite, this way you don’t have to switch to the Sprite drawer to select a sprite which is also in this window.\n\nTo remove a sprite from the overrides, open it’s settings and click the X in the top right corner of the sprite settings.\nSprite settings §\n\nGameobject - A prefab that will be spawned when the tile is placed with this sprite output.\nCollider type - How should the collider of this sprite behave\nOutput - Change how the sprite should appear, here you can choose between different outputs that’ll reveal their own options when selected. The defaul is Single, which just shows this sprite without anything extra.\n\nOutput - Random §\nWhen the output random is selected, the output will be chose randomly from the Sprites array, based on the settings.\n\n\nNoise - The perlin noise factor when placing the tile\nShuffle - Randomized transform given to the tile when placing it\nSprites - Thet sprites where the random sprite will be chosen from when the tile fits the rule.\nSize - The number of sprites to choose from\n\nOutput - Animation §\nWhen the output is set to animation, the output will cycle through and display the sprites in the Sprites array in sequence to create a frame-by-frame animation\n\n\nMin speed - The minimum possible speed at which the animation of the tile is displayed. The speed value will be randomly chosen between the minimum and maximum speeds.\nMax speed - The maximum possible speed at which the animation of the tile is displayed. The speed value will be randomly chosen between the minimum and maximum speeds.\nSprites - The frames of the animation sequence. The animation will play the sprites in this exact order, than loop back to the beginning to continue the animation.\nSize - The amount of frames the animation sequence has.\n\nOutput - Pattern §\nThe pattern output is useful when you have multiple tiles the tile together, but not individually. With this you can specify a set pattern which the output will follow and tile, so they’ll always match no matter where you place the tiles.\n\n\nPattern size - The size of the pattern\nSprites - The sprites that make up the pattern, the order here will determine how they’ll appear in the pattern. The sprites go from left to right, than top to bottom per row. When placing the tile on the tilemap, the output will loop back to the start of the column or row when the pattern ends, so they’ll tile up.\nSize - The amount of sprites that make up the pattern. This value is set automatically based on the pattern size.\nPattern preview - This section shows a preview of how the sprites will be ordered when placed down on the tilemap. This will also show if sprites are missing from the pattern.\n"},"The-editor/Tile-drawer":{"title":"Tile Drawer","links":["Getting-started/Tile","Tools/Brush","The-editor/Tile-inspector","Getting-started/Tiling-rule"],"tags":[],"content":"Tile drawer §\nThe tile drawer is the place where you can create and select Tiles to use. On top of that, this is also the place where you can see the currently selected tile or sprite which you can use to draw with the Brush tool.\n\nTo create a tile just simply click on the ”Add Tile” button in the drawer. The settings of the tiles you create can be changed in the Tile inspector window. When selecting a tile from the drawer which can be edited, the tile inspector will automatically show up in the bottom left corner of the editor window.\nRules §\nNext to the tiles you create, there are a few default rules which you will need to use to create Tiling rules that will determine how the tile will behave when placing it on the tilemap. These default rules are:\n\nDelete - It’s a rule that removes every other rule or tile. This is the tile you need to use to erase tiles from the grid using the Brush tool.\nEmpty - When this rule is placed, the rule passes if there’s no tile in this position.\nNot same - When this rule is place, the rule passes if the tile at this position is not the same as the tile which is checking.\nAny - This rule will pass if there’s any tile placed at this position.\n\n\n\n                  \n                  Tip \n                  \n                \nYou can read more about how rules work on the Tiling rule page.\n"},"The-editor/Tile-inspector":{"title":"Tile Inspector","links":["Getting-started/Tile","The-editor/Tile-drawer","Getting-started/Editor-window","The-editor/Grid","Getting-started/Tiling-rule","Tools/Grid-cell-inspector","The-editor/Sprite-override-settings","Extras/Examples","Features/Custom-properties"],"tags":[],"content":"Tile inspector §\nThe tile inspector is the place where you can change the settings of the Tiles you created in the Tile drawer window. To edit a tile’s settings, just select it from the tile drawer. After you selected the tile, the tile inspector window will automatically appear in the bottom left corner of the Editor window.\nThe options in the tile inspector are divided into different categories. Some of the options are the same as in regular rule tiles, but there are also quite a few options which are specific to Better rule tiles.\nAfter you’re done changing the settings of the tile, you can click the Apply changes button to see the changes take effect. Alternatively you can also switch to another tile to see your changes take effect.\n\nEditor options §\nThe settings present in this category change how the tile looks in the editor:\n\nTile name - The name of the tile in the editor, and after the tile has been exported.\nTile image - This option only affects how the tile looks in the editor. When leaving this empty, the tile will appear based on the settings in the Auto texture category. But if you want to add a custom preview image for your tile in the editor, you can add a texture here, and that’s how the tile will appear in the editor.\n\n\nAuto texture §\nIf you haven’t specified a Tile image in the Editor options category, than you can change how the automatic preview texture looks by changing the parameters in this window:\n\nTile color - Here you can specify the color and transparency of the preview texture.\nTile shape - Here you can specify the shape of the tile. The default value of this is also affected by your current Grid settings, so for square grids the default value will be Square, and for isometric grids, the default value will be Isometric. The shapes you can choose from are the following:\n\nSquare - Default for the square grid type.\n1x1 Slope - A slope for stairs and such.\n2x1 Slope Bottom - The top side of a 2 tile wide slope.\n2x1 Slope Top - The bottom side of a 2 tile wide slope.\nDiamond - Square rotated by 45 degrees.\nIsometric - Default shape for isometric tiles.\nHexagon Pointed Top - Default tile shape for the corresponding grid type.\nHexagon Flat Top - Default tile shape for the corresponding grid type.\nCircle - A circle, if you ever need one.\n\n\nMirror X - Mirrors the shape horizontally.\nMirror y - Mirrors the shape vertically.\n\n\nRile tile options §\nThese settings change how the tile will behave when placed on the tilemap, if none of the Tiling rules match the place where the tile is placed. Apart from the default sprite, these settings also affect how the placed tiling rules behave, unless they’re overridden in the Grid cell inspector or the Sprite override settings.\n\nDefault sprite - This sprite is the fallback, if none of the Tiling rules match the place where the tile is placed.\nDefault collider - The collider type of the tile when placed, same as a regular rule tile.\nDefault gameobject - Gameobject instantiated with the tile when placed.\n\n\nTile variation §\nIn the tile variations category, you can change whether that tile is unique or a variation of another tile. The default is unique, this is the default, and this way the tile will not be affected by other tiles. If the tile is not unique, it is a variation of another tile, which means it will fill all the missing Tiling rules which are not present in this tile, but present in the tile you specified in the variation of field, and add those Tiling rules to this tile.\n\nUnique tile - Is this tile unique or a variation of another tile?\nVariation of - The tile to fill in the missing Tiling rules from.\n\n\nTo see a specific example on how this feature works, look at the Examples provided with the package.\n\n\n                  \n                  Note \n                  \n                \nIf a tile is a variation of another tile, it doesn’t mean they’ll connect to each other, it just fills in the missing rules so you don’t have to. If you want tiles to connect with each other, look in the Connect to category.\n\nConnections §\nThe Connections or Connect to category provides you a way to make two separate tiles connect to each other in a simple way.\nTo add a tile to this list just simply select the tile from the dropdown, than click the Add button to add it to the list. All tiles added to the list will appear under the category. To remove a tile, just simply click the X button next to it.\n\nWhen a tile #2 is added to tile #1’s connection list, #1 will treat #2 as if it was the same tile, so it’ll connect to it the same way it’d connect to itself. But this connection is not mutual, even tho #1 connects to #2, number #2 will still treat #1 as a different tile. If you want both of them to connect to each other, you also need to add tile #2 to tile #1’s connection list.\nTo see this behaviour inside the tool, look at the Examples provided with the package.\nCustom properties §\nCustom properties are a way to store information in tiles. This could be useful for a number of things, for example for storing how fast the player can walk on the tile.\nTo add a property just simply click on the Add button. This will add a new property to the list, which you can change the name, the variable type, and the value. To remove a property just simply click on the X button next to it.\n\nThe properties you add here can be later accessed by scripts. Look at the Custom properties page to learn more, or look at the Examples provided with the package."},"The-editor/Toolbar":{"title":"Toolbar","links":["Getting-started/Editor-window","Tools/Brush","Tools/Picker-tool","Tools/Eraser","Tools/Move-tool","Tools/Selection-tool","Tools/Grid-cell-inspector","Extras/Keyboard-shortcuts","Tools/Lock-selection","Features/Preset-block","Tools/Replace-selection","The-editor/Export-options","The-editor/Grid","The-editor/Editor-settings","Getting-started/Sprite","Getting-started/Tile","The-editor/Sprite-drawer","The-editor/Sprite-override-settings"],"tags":[],"content":"Toolbar §\nThe toolbar is the row of buttons and toggles on top of the Editor window where you can access everything you need to use this tool. It’s divided into sections by horizontal double lines, so the different types of tools are separated into different groups.\n\nThe tools §\nGoing from left to right, the first group contains your actual tools:\n\nBrush (B) - Paint to the grid\nPicker tool (I) - Pick sprites or tiles from the grid\nEraser (F) - Erase sprites from the grid\nMove tool (M) - Move a selection\nSelection tool (S) - Select an area\nGrid cell inspector (E) - Inspect a grid cell\n\n\n\n                  \n                  Shortcuts \n                  \n                \nMore common tools and actions can also be selected with Keyboard shortcuts.\n\nActions §\nIn the next group you have a few actions:\n\nUndo (Ctrl + Z) - Undoes your last action\nRedo (Ctrl + Y) - Redoes your last action\nDelete selection (Delete) - Deletes the area selected with the Selection tool\nCopy (Ctrl + C) - Copies the currently area selected with the Selection tool to the clipboard\nPaste (Ctrl + V) - Pastes the copied selection in. Pressing paste will show a preview of the area which you can move around with the Move tool. After you’re ready to paste the selection in you can press Escape or switch tools to confirm the action. You can press Delete to cancel the action.\n\nExtra features §\nThe next group contains extra features, like:\n\nLock selection (L) - Lock a selection to prevent it from accidentally editing it\nUnlock selection (U) - Unlocks a locked selection\nCreate Preset block (P) - Creates a preset block\n\nAutomation tools §\nThe last group on the left side of the toolbar contains tools that can help you get things done faster:\n\nReplace selection - Replace sprites and tiles in the selected area\n\nExport options §\nGoing to the right side of the toolbar, on the top right corner you’ll find the Export options, where you can change the most important settings for the editor, like changing the Grid type. You can also change settings for exporting and of course you can find the export button here.\nSettings §\nContinuing to the left side you’ll find the settings group. You’ll find a few options for changing the appearance of the editor:\n\nEditor settings - Change settings of the editor grid and the editor windows\nHide sprites - Hides the Sprites so you can see what Tile is under them\nSnap windows - Snap windows or allow them to be moved\nShow coordinates - Show the grid coordinates on the side of the editor\nHighlight modified cells - Highlight cells modified by the Grid cell inspector with a flashing outline\n\nSprite windows §\nIn the next section you’ll see one or two buttons, depending on your settings in the Export options. With the first button you can show or hide the Sprite drawer. The other button will show or hide the Sprite override settings. You can only have one window open at a time.\nExtras §\nThe last group contains extras:\n\nOpen documentation - Opens the documentation\n"},"Tools/Brush":{"title":"Brush","links":["Tools/Brush","The-editor/Toolbar","Extras/Keyboard-shortcuts","The-editor/Tile-drawer"],"tags":[],"content":"Brush tool §\nThe Brush tool is one of the most important port of the editor, if you want to paint tiles or sprites you need to use the Brush tool.\n\nTo use the brush just select it from the Toolbar or by using Keyboard shortcuts and start drawing on the grid by pressing and holding down your left mouse button. The brush will use the selected sprite or tile shown in the Tile drawer. If there’s nothing selected, the brush will not do anything.\nHiding sprites §\nSprites and tiles are on two separate layers, when drawing with sprites you’ll draw on top the tiles, without affecting those. When drawing with tiles you’ll draw them under the sprites. Because of this some tiles may be hidden when drawing under sprites, you can combat this by enabling the hide sprites option on the Toolbar. This will hide the sprites so you can see what is under them.\nErasing tiles §\nThe brush toll is not only used to draw tiles and sprites but to erase tiles as well. To erase tiles you just need to select the Delete tile from the Tile drawer and use that to draw. Using this will override any tile with an empty rule."},"Tools/Eraser":{"title":"Eraser","links":["Tools/Eraser","Getting-started/Sprite","The-editor/Grid","The-editor/Toolbar","Extras/Keyboard-shortcuts","Getting-started/Tile","Tools/Brush"],"tags":[],"content":"Eraser tool §\nThe Eraser tool serves only one purpose, to erase Sprites from the Grid. To use the tool just simply select it from the Toolbar or with Keyboard shortcuts (D) and click or drag on the sprite which you want to erase with your left mouse button.\n\nTo erase Tiles you need to use the Brush tool."},"Tools/Grid-cell-inspector":{"title":"Cell Inspector","links":["Tools/Grid-cell-inspector","Getting-started/Tiling-rule","The-editor/Grid","The-editor/Toolbar","Extras/Keyboard-shortcuts","Tools/Selection-tool","The-editor/Export-options","The-editor/Sprite-override-settings","Tools/Brush","Getting-started/Tile","The-editor/Tile-inspector"],"tags":[],"content":"Grid cell inspector §\nThe Grid cell inspector is used to change properties of a specific grid cell. These options include the same options you’d find in the Tiling rule section of a regular rule tile. You can change options like the sprite output, collider and linked game object. The actual Tiling rule are set by placing tiles around the sprites on the Grid.\n\nTo access the inspector window select the inspector tool from the Toolbar or by using Keyboard shortcuts (E), and select a grid cell using it by left clicking on the grid cell. This will highlight the selected tile with a yellow outline and show the grid cell inspector window in the bottom right corner. This window will be hidden if you select any other tool apart from the Selection tool.\n\nGrid cell options §\nIn the inspector options you’ll see a few options based on your Export options. If Universal sprite settings is enabled, every option that is related to the sprite output will move over to the Sprite override settings window, where you can change the settings per sprite instead of per grid cell. This way you don’t need to change the settings for every cell that has the same sprite output, only for that one sprite in the override settings window.\n\n\nDisplay sprite - This field contains a reference to the sprite which is displayed on the grid, changing the sprite here would be the same as using the Brush tool to change the sprite.\n\n\nUse default settings - If this is enabled the sprite will use the default collider and game object of the Tile which you can change in the Tile inspector window. If you disable this you’ll gain access to these two options.\n\n\nTo make it easier to find cells that have been modified, there’s an option on the Toolbar to highlight any cells that have been modified. When this option is enabled an cells that have been modified will be highlighted with a flashing outline.\n\nOutput - This option will change the sprite output of the Tiling rule.\n\n\n\n                  \n                  Sprite options \n                  \n                \nThe sprite output settings are identical to the ones in the Sprite override settings window. to read about these settings go to that page.\n\n\n\nNeighbor positions - In this window you can change where the tile will check for the neighbor to determine the rule. This window is similar to the one you can see when creating a regular rule tile, with the only difference that this one only determines the positions to check for, and not the actual rules. If you want to extend the range by a significant amount, you can switch over to the Selection tool, select the area around the inspected cell that you want to check for, and click the Add selection tool. This way you don’t have to click each cell one by one.\n\n\nTransform - This option determines whether or not the sprite can be rotated or mirrored to fit the rules. To change this option click the center square in the Neighbor positions grid, this will cycle through the options. When the cell is part of a preset block this option will be instead shown as a dropdown, and will apply to the entire preset block, not just that one cell.\n\n\n\n[!Preset blocks]\nIf the cell is part of a preset block, the neighbor positions option will be disabled because the preet block manages them. Instead the neighbor positions section will show the options for the preset block.\n"},"Tools/Lock-selection":{"title":"Lock Selection","links":["Tools/Selection-tool","The-editor/Toolbar","Extras/Keyboard-shortcuts","The-editor/Editor-settings","Tools/Brush","Tools/Eraser","Tools/Move-tool"],"tags":[],"content":"Lock selection §\nWith the lock selection tool you can lock an area to prevent it from accidentally being edited or deleted. To lock a selection select the area you want to lock with the Selection tool, then click the lock selection button in the Toolbar or by using Keyboard shortcuts (L).\n\nWhen a selection is locked, all the locked cells will be displayed with a red outline by default. You can change how the locked cells look in the Editor settings.\nWhen a cell is locked, it won’t allow you to modify the sprite or tile with the Brush or Eraser tools, you won’t be able to move them with the Move tool or delete them when pressing Delete.\n\nUnlock selection §\nTo unlock a selection just simply select them with the Selection tool again and click the Unlock selection button in the Toolbar, which is located right next to the Lock selection button. You can also use Keyboard shortcuts (U)."},"Tools/Move-tool":{"title":"Move Tool","links":["Tools/Move-tool","Tools/Selection-tool","The-editor/Toolbar","Extras/Keyboard-shortcuts","The-editor/Grid","Tools/Lock-selection"],"tags":[],"content":"Move tool §\nWith the Move tool, you can move the selection around the grid which you selected with the Selection tool tool.\n\nTo move a selection select the tool from the Toolbar or using Keyboard shortcuts (M) while a slection is active, click anywhere on the Grid to begin moving the selection. While moving the selection the outline will change to blue. You can move the selection while holding the left mouse button. When releasing the mouse button the contents of the selection will be moved to their new position.\n\nThe move tool will not move tiles if they were locked with the Lock selection tool.\n\nIf you move a selection on top of other tiles, the selection will override the tiles which are already there.\nMoving the clipboard §\nAfter copying a selection using the Copy function from the Toolbar you can paste this selection with the Paste function from the Toolbar (or by using Keyboard shortcuts CTRL + C and CTRL + V) and move the selection with the Move tool.\nWhen pasting in a selection the Move tool tool will automatically be selected. You can move the selection around as much as you like, while the selection is shown in a green outline it is just a preview and has not been confirmed yet. To confirm the selection and paste the clipboard in you can switch to any other tool or press Escape.\n\nIf you changed your mind and don’t want to paste the copied selection in, you can press the Delete key. When the green selection is visible the delete key will not delete any tiles or sprites inside the selection, it’ll just remove the clipboard preview without pasting it in."},"Tools/Picker-tool":{"title":"Picker Tool","links":["Tools/Picker-tool","The-editor/Grid","The-editor/Toolbar","Extras/Keyboard-shortcuts","Tools/Brush"],"tags":[],"content":"Picker tool §\nThe Picker tool is useful to quickly switch between tiles or sprites that you’ve already placed on the Grid. To select the picker tool you can select it from the Toolbar or with Keyboard shortcuts (I).\n\nTo use the picker tool you just simply select it and than click on the sprite or tile you want to select. After selecting a tile or sprite the tool will be automatically switched to the Brush tool so you can draw without selecting another tool.\nIf a grid cell contains both a tile and a sprite, the sprite will be picked. If the cell is empty nothing will be picked and the picker tool will stay as the selected tool."},"Tools/Replace-selection":{"title":"Replace Selection","links":["Tools/Replace-selection"],"tags":[],"content":"Replace selection §\nThe Replace selection tool is a useful tool when you want to create a new set of rules using rules you’ve already created, or if you just want to replace sprites or tiles. With this tool, you can replace every tile and sprite with another tile and sprite in the selection you made with the Selection tool.\n\nWhen replacing tiles, it just winds every type of tile you specified in the replace from section, and replaces them with the tile you specified in the replace to section.\nWhen replacing tiles, it looks at the file name, finds the section which matches with the string you specified in the replace from section, and replaces that string to the one in the replace to section. It is basically a find and replace tool. A matching file will be searched in the asset database, and if a matching file was found the sprite will be replaced. If there’s no matching tile nothing will happen.\nReplace from = &quot;Green&quot;\nReplace to = &quot;Purple&quot;\n\nFile = &quot;Green_Grass&quot; =&gt; &quot;Purple_Grass&quot;\n\n\n\n                  \n                  Warning \n                  \n                \nThe string is case sensitive! “Green” != “green”\n\n\n\n                  \n                  Warning \n                  \n                \nThe images have to have the same path, so they need to be in the same folder.\n"},"Tools/Selection-tool":{"title":"Selection Tool","links":["Tools/Selection-tool","The-editor/Toolbar","Extras/Keyboard-shortcuts","Tools/Move-tool","Tools/Grid-cell-inspector","Tools/Lock-selection","Features/Preset-block","Tools/Replace-selection"],"tags":[],"content":"Selection tool §\nThe Selection tool is used to create selections, which allow the user to manipulate multiple grid cells at the same time. Select the tool from the Toolbar or by using Keyboard shortcuts (S).\n\nTo create a selection, just left click on the grid cell where you want one of the corners to be, then while still holding the left mouse button drag your cursor to the other corner of your desired area. After that release the left mouse button to confirm the selection.\n\nThe selection will stay active until you create a new selection, or until you pick a tool that does not require a selection.\nSelections are used with a number of tools:\n\nMove tool - move a selection around\nGrid cell inspector - using a selection you can easily specify neighbor positions\nDelete selection - delete the tiles and sprites inside the selection\nCopy selection - copy the selection\nPaste selection - paste in a copied selection, which you can than position with the Move tool\nLock selection - lock the selection\nUnlock selection - unlock the selection\nPreset block - create a preset block from the selection\nReplace selection - easily replace sprites and tiles in the selection\n"},"Updates/Changelog":{"title":"Changelog","links":["The-editor/Sprite-override-settings","Features/Preset-block","Extras/Examples"],"tags":[],"content":"Version 1.4.1 §\n\nFixed sprite output transform when using universal sprite settings\nReadded sprite output transform option when using preset blocks\nMoving and pasting over something will now override what’s already there\nAdded support for light theme\nToolbar bugfix\n\nVersion 1.4.0 §\n\nAdded a new Sprite override settings window, here you can change the output parameters of a sprite, so if you place that sprite down multiple times it’ll always have the same output.\nSeparated the sprite drawer toolbar button and added a new button to open the Universal sprite settings\nAdded an Enable universal sprite settings option to the export menu, this option is enabled by default on newly created assets, and disabled on already existing assets\nImproved UI for better readability and separation between sections of the window.\nRenamed tile variations and variation of options to make them less confusing.\nAdded a confirmation window when deleting a tile.\nFixed error which caused the game to not build\nTextures will be marked readable automatically if they’re not already, it’s not required to set it manually anymore\nAdded a new Preset block feature. Draw part of a scene in the editor and mark it as a preset block to make sure it’ll look as you wanted it to. To remove the preset block, use the grid cell inspector on a tile inside the preset block.\nAdded more tooltips\nAdded Examples each with their own tilemaps and scenes for the following features:\n\nsimplify rules feature\ncreating rules\npreset blocks\nconnections between tiles\nuniversal sprite settings and sprite options\nvariations\ncustom properties\n\n\nToolbar now better adapts to the width of the editor window\n\nVersion 1.3.3 §\n\nFixed bug: Tiles randomly disappear from the grid and the tile drawer.\nFixed bug: Editor crashes when entering or exiting play mode.\nAdded a Close window button to the container asset, in case you can’t close the window in any other way.\n\nVersion 1.3.1 &amp; Version 1.3.2 §\n\nChanged the way the editor handles arrays.\n\nVersion 1.3.0 §\n\nAdded a new sprite output type: Pattern.\nOther backend changes.\n\nVersion 1.2.0 §\n\nTested and verified compatibility with Unity 2019.\nChanged how locked cells are displayed.\nAdded options to customize how locked cells are displayed.\nAdded a sprite drawer.\nAdded options to customize the new sprite drawer.\nImport all sprites with a single button press.\nFixed a build error related to the Functions class.\n\nVersion 1.1.0 §\n\nChanged toolbar button placement code to be more dynamic.\nAdded the ability to lock and unlock a selection, so it can’t be edited accidentally.\nAdded a warning message if the default sprite was not assigned.\n\nVersion 1.0.1 §\n\nAdded support for differently sliced isometric tiles, previously it only supported square sliced sprites.\nUpdated package dependencies to reflect the minimum supported versions of packages and unity version.\nThe tool now supports Unity 2020.\n\nVersion 1.0.0 §\nInitial release"},"Updates/Development":{"title":"Development","links":[],"tags":[],"content":"Report bugs §\nTo report a bug head to this page. Please try to not report bugs that have been already reported, to keep the discussion board more organized.\nKnown issues §\n\nThe random sprites option can behave weirdly. Time and cause of this bug is currently unknown.\nHexagon grid zooming doesn’t center around the mouse cursor properly.\nSprite drawer cannot be moved\nUnity 2022.2 2D URP - sprites are not displayed correctly\n\nResolved §\nUpcoming features §"},"index":{"title":"Welcome","links":["Home/About-the-tool","Getting-started/Better-rule-tile-container","Getting-started/Editor-window","Getting-started/Tile","Getting-started/Sprite","Getting-started/Tiling-rule","Getting-started/Export"],"tags":[],"content":"Better Rule Tiles §\nBetter Rule Tiles for Unity was made to make the hassle of creating rule tiles better, easier and more intuitive that Unity’s built in solution, while also added more features which would require you to code them yourself. You can read more About the tool here.\nOnce you’ve installed the package, follow these steps to begin your journey:\n\nCreate a Better rule tile container asset.\nOpen the Editor window.\nCreate Tiles.\nAdd Sprites.\nCreate Tiling rules.\nExport your tiles.\n\nYou can report issues on the Better Rule Tiles support GitHub page.\nIf you have any questions or issues, join the discord to get help."}}